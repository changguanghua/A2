
n_number ::=  '0'|'1'|'2'|'3'|'4'| 
			  '5'|'6'|'7'|'8'|'9'
integer ::= {n_number}
real ::= {n_number}‘.’{n_number}
hex  ::= (‘0x’ | ‘0X’){n_number|'A'|'a'|'B'|'b'|
						'C'|'c'|'D'|'d'|'E'|'e'|'F'|'f'}

char ::= 'q'|'w'|'e'|'r'|'t'|'y'|'u'|'i'|'o'|'p'|'a'|'s'|'d'|'f'|'g'|'h'|'j'|
		 'k'|'l'|'z'|'x'|'c'|'v'|'b'|'n'|'m'|'Q'|'W'|'E'|'R'|'T'|'Y'|'U'|'I'|
		 'O'|'P'|'A'|'S'|'D'|'F'|'G'|'H'|'J'|'K'|'L'|'Z'|'X'|'C'|'V'|'B'|'N'|'M'
sign ::= ‘~’|`|‘|’!‘|’@‘|’#‘|’$‘|’%‘|’^‘|’&‘|’*‘|’(‘|’)‘|’_‘|’+‘|’,‘|’.‘|’/‘|
		 ’;‘|’'‘|’"‘|’[‘|’]‘|’\‘|’{‘|’}‘|’:‘|’?‘

name   	::= '_'|char{char|sign}

trunk	::= exp | mutl_ass

segment	::= {trunk[';']}

block	::= '{'segment'}'

string 	::= '''{char|sign}'''

number 	::= integer|real|hex

array  	::= '['[exp{','exp}]']'

map_key		::= string | name
map_value	::= exp
map_kv		::= map_key'='map_value
map	   		::= '{'[map_kv{','map_kv}']'}'

_chi		::='.' name
_idx		::='['exp']'
_call		::='('{exp}')'
_var		::= _chi | _idx | _var
var 		::=name{_var}

var_write	::= name|name {_var} _chi

local_mutl_name ::= name{',', name}
_local_ass	::= name'='exp
_local_exp	::= name | local_mutl_name | _local_ass
local_exp	::= 'local' _local_exp

arg 		::= name|'...'|name{',' name}[',' '...'] 
function	::= 'function' [name]'('[arg]')''{'segment'}'

if_seg		::= trunk | block
if			::=	'if' '(' exp ')' if_seg

elseif_per	::= if | elseif
elseif		::=	elseif_per 'elseif' '(' exp ')' if_seg

else 		::= elseif_per 'else' if_seg

for			::= 'for' '(' name '=' exp ',' number ')' block

foreach		::= 'foreach' '(' name ',' name 'in' exp ')' block

ari_op		::= '+' '-' '*' '/'
var_op		::= var | number
arithmetic	::= var_op ari_op var_op | '(' var_op ari_op var_op ')'

logic_op	::= '>' '<' '==' '!=' '!' '>=' '<=' '|' '&'
logic 		::= var_op logic_op var_op | '(' var_op logic_op var_op ')'

func_call	::=var _call
ass 		::=var_write{',' var_write} '=' var{',', var}

exp :=  func_call | if | for | foreach 
